# Copyright 2016 Cheng Zhao. All rights reserved.

declare_args() {
  # Enable 64-bit GC references.
  luajit_enable_gc64 = false
  if (target_cpu == "arm64") {
    luajit_enable_gc64 = true
  }
}

# Translated from lj_arch.h.
luajit_enable_jit = !luajit_enable_gc64
if (luajit_enable_gc64) {
  luajit_defines += [ "LUAJIT_ENABLE_GC64" ]
}

# Translated from src/Makefile, do not change the seqeunce.
luajit_defines = []
dasm_flags = []
if (target_cpu != "mips" && target_cpu != "ppc") {
  dasm_flags += ["-D", "ENDIAN_LE"]
} else {
  assert(false, "Unsupported cpu: " + target_cpu)
}
if (target_cpu == "x64" || target_cpu == "arm64") {
  luajit_defines += ["LUAJIT_TARGET=LUAJIT_ARCH_x64"]
  dasm_flags += ["-D", "P64"]
} else {
  luajit_defines += ["LUAJIT_TARGET=LUAJIT_ARCH_$target_cpu"]
}
if (luajit_enable_jit) {
  dasm_flags += ["-D", "JIT"]
}
if (target_os != "console") {
  dasm_flags += ["-D", "FFI"]
}
if (target_cpu == "arm" || target_cpu == "arm64") {
  dasm_flags += ["-D", "DUALNUM"]
  if (arm_float_abi == "soft" || arm_float_abi == "softfp") {
    luajit_defines += [
      "LJ_ABI_SOFTFP=1",
      "LJ_ARCH_HASFPU=0",
    ]
  } else {
    luajit_defines += [
      "LJ_ABI_SOFTFP=0",
      "LJ_ARCH_HASFPU=1",
    ]
    dasm_flags += ["-D", "FPU"]
    dasm_flags += ["-D", "HFABI"]
  }
}
if (target_os == "ios") {
  dasm_flags += ["-D", "NO_UNWIND"]
}
if (target_cpu == "arm" || target_cpu == "arm64") {
  dasm_flags += ["-D", "VER=${arm_version}0"]
}
if (target_cpu == "x86") {
  dasm_flags += ["-D", "SSE"]
}
if (target_os == "ios") {
  dasm_flags += ["-D", "IOS"]
}

executable("minilua") {
  defines = luajit_defines
  sources = [
    "src/host/minilua.c",
  ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

action("generate_buildvm_arch_h") {
  if (target_cpu == "x64" && !luajit_enable_gc64) {
    dasm_arch = "x86"
  } else {
    dasm_arch = target_cpu
  }

  hostlua = "$root_out_dir/minilua"
  dasm_lua = "dynasm/dynasm.lua"
  dasm_asc = "src/vm_$dasm_arch.dasc"
  buildvm_arch_h = "$target_gen_dir/buildvm_arch.h"

  script = "//build/run.py"
  inputs = [ hostlua, dasm_lua ]
  outputs = [ buildvm_arch_h ]
  args = [ rebase_path(hostlua), rebase_path(dasm_lua) ] + dasm_flags +
         ["-o", rebase_path(buildvm_arch_h), rebase_path(dasm_asc) ]

  deps = [ ":minilua($host_toolchain)" ]
}

executable("buildvm") {
  defines = luajit_defines
  include_dirs = [
    "src",
    "$target_gen_dir",
  ]
  sources = [
    "src/host/buildvm.c",
    "src/host/buildvm.h",
    "src/host/buildvm_asm.c",
    "src/host/buildvm_peobj.c",
    "src/host/buildvm_libbc.h",
    "src/host/buildvm_lib.c",
    "src/host/buildvm_fold.c",
  ]
  cflags = [ "-Wno-shift-overflow" ]

  deps = [ ":generate_buildvm_arch_h" ]

  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [ "//build/config/compiler:no_chromium_code" ]
}

action("generate_ljvm_s") {
  buildvm = "$root_out_dir/buildvm"
  ljvm_bout = "$target_gen_dir/lj_vm.S"
  ljvm_mode = "elfasm"
  if (target_os == "win") {
    ljvm_bout = "$target_gen_dir/lj_vm.o"
    ljvm_mode = "peobj"
  } else if (target_os == "mac" || target_os == "ios") {
    ljvm_mode = "machasm"
  }

  script = "//build/run.py"
  inputs = [ buildvm ]
  outputs = [ ljvm_bout ]
  args = [ rebase_path(buildvm), "-m", ljvm_mode, "-o", rebase_path(ljvm_bout) ]

  deps = [ ":buildvm($host_toolchain)" ]
}

source_set("luajit") {
}
