# Copyright 2016 Cheng Zhao. All rights reserved.
# Use of this source code is governed by the license that can be found in the
# LICENSE file.

import("//testing/test.gni")

declare_args() {
  # Whether to build for GTK+3.
  use_gtk3 = false
}

source_set("nativeui") {
  sources = [
    "nativeui.h",
    "nativeui_export.h",
    "button.h",
    "container.cc",
    "container.h",
    "types.h",
    "view.cc",
    "view.h",
    "label.h",
    "group.cc",
    "group.h",
    "state.cc",
    "state.h",
    "signal.h",
    "window.cc",
    "window.h",
    "gfx/color.h",
    "gfx/font.cc",
    "gfx/font.h",
    "gfx/platform_font.h",
    "gfx/text.h",
    "gfx/gtk/platform_font_gtk.cc",
    "gfx/gtk/platform_font_gtk.h",
    "gfx/mac/coordinate_conversion.mm",
    "gfx/mac/coordinate_conversion.h",
    "gfx/mac/platform_font_mac.mm",
    "gfx/mac/platform_font_mac.h",
    "gfx/mac/text_mac.mm",
    "gfx/win/color_win.cc",
    "gfx/win/double_buffer.h",
    "gfx/win/platform_font_win.cc",
    "gfx/win/platform_font_win.h",
    "gfx/win/scoped_set_map_mode.h",
    "gfx/win/text_win.cc",
    "gfx/win/gdiplus.h",
    "gfx/geometry/insets.cc",
    "gfx/geometry/insets.h",
    "gfx/geometry/insets_f.cc",
    "gfx/geometry/insets_f.h",
    "gfx/geometry/point.cc",
    "gfx/geometry/point.h",
    "gfx/geometry/point_conversions.cc",
    "gfx/geometry/point_conversions.h",
    "gfx/geometry/point_f.cc",
    "gfx/geometry/point_f.h",
    "gfx/geometry/rect.cc",
    "gfx/geometry/rect.h",
    "gfx/geometry/rect_f.cc",
    "gfx/geometry/rect_f.h",
    "gfx/geometry/safe_integer_conversions.h",
    "gfx/geometry/size.cc",
    "gfx/geometry/size.h",
    "gfx/geometry/size_conversions.cc",
    "gfx/geometry/size_conversions.h",
    "gfx/geometry/size_f.cc",
    "gfx/geometry/size_f.h",
    "gfx/geometry/vector2d.cc",
    "gfx/geometry/vector2d.h",
    "gfx/geometry/vector2d_conversions.cc",
    "gfx/geometry/vector2d_conversions.h",
    "gfx/geometry/vector2d_f.cc",
    "gfx/geometry/vector2d_f.h",
    "layout/box_layout.cc",
    "layout/box_layout.h",
    "layout/fill_layout.cc",
    "layout/fill_layout.h",
    "layout/layout_manager.h",
    "gtk/gtk_event_loop.cc",
    "gtk/gtk_event_loop.h",
    "gtk/button_gtk.cc",
    "gtk/container_gtk.cc",
    "gtk/group_gtk.cc",
    "gtk/label_gtk.cc",
    "gtk/state_gtk.cc",
    "gtk/view_gtk.cc",
    "gtk/window_gtk.cc",
    "mac/button_mac.mm",
    "mac/container_mac.mm",
    "mac/group_mac.mm",
    "mac/label_mac.mm",
    "mac/state_mac.mm",
    "mac/view_mac.mm",
    "mac/window_mac.mm",
    "win/base_view.cc",
    "win/base_view.h",
    "win/subwin_holder.cc",
    "win/subwin_holder.h",
    "win/subwin_view.cc",
    "win/subwin_view.h",
    "win/window_impl.cc",
    "win/window_impl.h",
    "win/button_win.cc",
    "win/container_win.cc",
    "win/group_win.cc",
    "win/label_win.cc",
    "win/view_win.cc",
    "win/screen.cc",
    "win/screen.h",
    "win/state_win.cc",
    "win/window_win.cc",
    "win/util/hwnd_util.cc",
    "win/util/hwnd_util.h",
    "win/util/msg.h",
  ]

  deps = [
    "//base",
  ]

  if (is_linux) {
    if (use_gtk3) {
      public_configs = [ "//build/config/linux/gtk3" ]
    } else {
      public_configs = [ "//build/config/linux/gtk2" ]
    }

    # Do not warn on using deprecated GTK APIs.
    cflags_cc = [ "-Wno-deprecated-declarations" ]
  } else if (is_win) {
    libs = [
      "gdi32.lib",
      "gdiplus.lib",
    ]
    deps += [
      "//build/win:default_exe_manifest",
    ]
    configs -= [ "//build/config/win:lean_and_mean" ]
  }
}

test("nativeui_unittests") {
  sources = [
    "container_unittest.cc",
    "group_unittest.cc",
    "label_unittest.cc",
    "view_unittest.cc",
    "window_unittest.cc",
    "layout/fill_layout_unittest.cc",
    "layout/box_layout_unittest.cc",
    "test/gfx_util.cc",
    "test/gfx_util.h",
    "test/run_all_unittests.cc",
  ]

  deps = [
    ":nativeui",
    "//base/test:test_support",
    "//testing/gtest",
  ]
}
